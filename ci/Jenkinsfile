pipeline {
    agent any
    parameters {
        booleanParam(defaultValue: false, description: 'Deploy Audit Service', name:
    'DEPLOY_AUDIT')
        booleanParam(defaultValue: false, description: 'Deploy Dashboard-UI', name:
    'DEPLOY_DASHBOARD')
        booleanParam(defaultValue: false, description: 'Deploy Health Service', name:
    'DEPLOY_HEALTH')
        booleanParam(defaultValue: false, description: 'Deploy Processing Service', name:
    'DEPLOY_PROCESSING')
        booleanParam(defaultValue: false, description: 'Deploy Receiver Service', name:
    'DEPLOY_RECEIVER')
        booleanParam(defaultValue: false, description: 'Deploy Storage Service', name:
    'DEPLOY_STORAGE')
    }
    stages {
        stage('Python Lint') {
            steps {
                sh 'pip install -r ./audit_log/requirements.txt'
                sh 'cd ..; pylint --fail-under=5 ./3855; cd 3855'
                // sh 'pylint --fail-under=5 ./audit_log'
                // sh 'pylint --fail-under=5 ./dashboard-ui'
                // sh 'pylint --fail-under=5 ./health'
                // sh 'pylint --fail-under=5 ./processing'
                // sh 'pylint --fail-under=5 ./receiver'
                // sh 'pylint --fail-under=5 ./storage'
            }
        }
        stage('Package'){
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
                anyOf {
                    expression { params.DEPLOY_AUDIT }
                    expression { params.DEPLOY_DASHBOARD }
                    expression { params.DEPLOY_HEALTH }
                    expression { params.DEPLOY_PROCESSING }
                    expression { params.DEPLOY_RECEIVER }
                    expression { params.DEPLOY_STORAGE }
                }
            }
            steps {
                script{
                    if (params.DEPLOY_AUDIT) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t audit_log:latest --tag tannedstone/audit_log:audit_log ./audit_log"
                            sh "docker push tannedstone/audit_log:audit_log"
                        }
                    }

                    if (params.DEPLOY_DASHBOARD) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t dashboard:latest --tag tannedstone/dashboard:dashboard ./dashboard-ui"
                            sh "docker push tannedstone/dashboard:dashboard"
                        }
                    }

                    if (params.DEPLOY_HEALTH) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t health:latest --tag tannedstone/health:health ./health"
                            sh "docker push tannedstone/health:health"
                        }
                    }

                    if (params.DEPLOY_PROCESSING) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t processing:latest --tag tannedstone/processing:processing ./processing"
                            sh "docker push tannedstone/processing:processing"
                        }
                    }

                    if (params.DEPLOY_RECEIVER) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t receiver:latest --tag tannedstone/receiver:receiver ./receiver"
                            sh "docker push tannedstone/receiver:receiver"
                        }
                    }

                    if (params.DEPLOY_STORAGE) {
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                            sh "docker build -t storage:latest --tag tannedstone/storage:storage ./storage"
                            sh "docker push tannedstone/storage:storage"
                        }
                    }
                }
            }
        }
    }
}//1

