pipeline {
    agent any
    parameters {
        booleanParam(defaultValue: false, description: 'Deploy Audit Service', name:
    'DEPLOY_AUDIT')
        booleanParam(defaultValue: false, description: 'Deploy Dashboard-UI', name:
    'DEPLOY_DASHBOARD')
        booleanParam(defaultValue: false, description: 'Deploy Health Service', name:
    'DEPLOY_HEALTH')
        booleanParam(defaultValue: false, description: 'Deploy Processing Service', name:
    'DEPLOY_PROCESSING')
        booleanParam(defaultValue: false, description: 'Deploy Receiver Service', name:
    'DEPLOY_RECEIVER')
        booleanParam(defaultValue: false, description: 'Deploy Storage Service', name:
    'DEPLOY_STORAGE')
    }
    stages {
        stage('Python Lint') {
            steps {
                sh 'pip install -r ./audit_log/requirements.txt'
                sh 'cd ..; pylint --fail-under=5 ./3855; cd 3855'
                // sh 'pylint --fail-under=5 ./audit_log'
                // sh 'pylint --fail-under=5 ./dashboard-ui'
                // sh 'pylint --fail-under=5 ./health'
                // sh 'pylint --fail-under=5 ./processing'
                // sh 'pylint --fail-under=5 ./receiver'
                // sh 'pylint --fail-under=5 ./storage'
            }
        }
        stage('Package'){
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
                anyOf {
                    expression { params.DEPLOY_AUDIT }
                    expression { params.DEPLOY_DASHBOARD }
                    expression { params.DEPLOY_HEALTH }
                    expression { params.DEPLOY_PROCESSING }
                    expression { params.DEPLOY_RECEIVER }
                    expression { params.DEPLOY_STORAGE }
                }
            }
            steps {
                script{
                    withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                        sh "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                    }
                    if (params.DEPLOY_AUDIT) {
                        sh "docker build -t audit_log:latest --tag tannedstone/audit_log:audit_logapp ./audit_log"
                        sh "docker push tannedstone/audit_log:audit_logapp"            
                    }

                    if (params.DEPLOY_DASHBOARD) {
                        sh "docker build -t dashboard:latest --tag tannedstone/dashboard:dashboardapp ./dashboard-ui"
                        sh "docker push tannedstone/dashboard:dashboardapp"
                    }

                    if (params.DEPLOY_HEALTH) {
                        sh "docker build -t health:latest --tag tannedstone/health:healthapp ./health"
                        sh "docker push tannedstone/health:healthapp"
                    }

                    if (params.DEPLOY_PROCESSING) {
                        sh "docker build -t processing:latest --tag tannedstone/processing:processingapp ./processing"
                        sh "docker push tannedstone/processing:processingapp"
                    }

                    if (params.DEPLOY_RECEIVER) {
                        sh "docker build -t receiver:latest --tag tannedstone/receiver:receiverapp ./receiver"
                        sh "docker push tannedstone/receiver:receiverapp"
                    }

                    if (params.DEPLOY_STORAGE) {
                        sh "docker build -t storage:latest --tag tannedstone/storage:storageapp ./storage"
                        sh "docker push tannedstone/storage:storageapp"
                    }
                }
            }
        }
        stage('Scan image and Zip'){
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
                anyOf {
                    expression { params.DEPLOY_AUDIT }
                    expression { params.DEPLOY_DASHBOARD }
                    expression { params.DEPLOY_HEALTH }
                    expression { params.DEPLOY_PROCESSING }
                    expression { params.DEPLOY_RECEIVER }
                    expression { params.DEPLOY_STORAGE }
                }
            }
            steps {
                script{
                    if (params.DEPLOY_AUDIT) {
                        sh "docker scan --json audit_log"
                    }

                    if (params.DEPLOY_DASHBOARD) {
                        sh "docker scan --json dashboard"
                    }

                    if (params.DEPLOY_HEALTH) {
                        sh "docker scan --json health"
                    }

                    if (params.DEPLOY_PROCESSING) {
                        sh "docker scan --json processing"
                    }

                    if (params.DEPLOY_RECEIVER) {
                        sh "docker scan --json receiver"
                    }

                    if (params.DEPLOY_STORAGE) {
                        sh "docker scan --json storage"
                    }
                    sh 'zip -r 3855.zip audit_log ci dashboard-ui deployment health processing receiver storage .gitignore .prettierignore nginx.conf package-lock.json template.sh'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '3855.zip'
                }
            }
        }
        stage('Deploy'){
            when {
                expression { env.GIT_BRANCH == 'origin/main' }
                anyOf {
                    expression { params.DEPLOY_AUDIT }
                    expression { params.DEPLOY_DASHBOARD }
                    expression { params.DEPLOY_HEALTH }
                    expression { params.DEPLOY_PROCESSING }
                    expression { params.DEPLOY_RECEIVER }
                    expression { params.DEPLOY_STORAGE }
                }
            }
            steps{
                withCredentials([file(credentialsId: 'secret_ssh', variable: "KEYFILE")]) {
                    script{
                        def remote = [:]
                        remote.name = "3855 VM"
                        remote.user = "phamminhtan"
                        remote.host = "messager.eastus2.cloudapp.azure.com"
                        remote.allowAnyHosts = true
                        remote.identityFile = KEYFILE
                        withCredentials([string(credentialsId: 'DockerHub', variable: 'TOKEN')]) {
                            sshCommand remote: remote, command: "docker login -u 'tannedstone' -p '$TOKEN' docker.io"
                        }
                        if (params.DEPLOY_AUDIT) {
                            sshCommand remote: remote, command: "docker pull tannedstone/audit_log:audit_logapp"
                        }

                        if (params.DEPLOY_DASHBOARD) {
                            sshCommand remote: remote, command: "docker pull tannedstone/dashboard:dashboardapp"
                        }

                        if (params.DEPLOY_HEALTH) {
                            sshCommand remote: remote, command: "docker pull tannedstone/health:healthapp"
                        }

                        if (params.DEPLOY_PROCESSING) {
                            sshCommand remote: remote, command: "docker pull tannedstone/processing:processingapp"
                        }

                        if (params.DEPLOY_RECEIVER) {
                            sshCommand remote: remote, command: "docker pull tannedstone/receiver:receiverapp"
                        }

                        if (params.DEPLOY_STORAGE) {
                            sshCommand remote: remote, command: "docker pull tannedstone/storage:storageapp"
                        }
                        sshCommand remote: remote, command: "cd docker; git pull; cd deployment; docker compose down; cd ../deploymentJenkins; docker compose down; docker compose up -d"
                    }
                }
            }
        }
    }
}//2

